# -*- coding: utf-8 -*-
"""ertosql.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Q39X77eipPZr7W6IHKWUr8AeygHclWxf
"""

from PIL import Image
from IPython.display import display
# from tkinter.filedialog import askopenfilename

# file_path = askopenfilename()
file_path =  "/erdiagram.png"
image = Image.open(file_path)
display(image)

!apt-get install tesseract-ocr
!pip install pytesseract
import pytesseract

# Make sure Tesseract is installed and in PATH
text = pytesseract.image_to_string(image)
print(text)

# A basic parser - assume tables are labeled "TableName: col1, col2"
def parse_schema(ocr_text):
    schema = {}
    lines = [line.strip() for line in ocr_text.splitlines() if line.strip()]

    current_table = None
    for line in lines:
        # Assume lines without underscores are table names
        if line.isalpha() and line[0].isupper():
            current_table = line
            schema[current_table] = []
        elif current_table:
            schema[current_table].append(line)
    return schema


schema = parse_schema(text)
schema

!pip install sentence-transformers faiss-cpu

from sentence_transformers import SentenceTransformer
import faiss
import numpy as np

model = SentenceTransformer('all-MiniLM-L6-v2')

# Convert schema into natural language sentences
schema_texts = [f"Table {table} has columns {', '.join(cols)}" for table, cols in schema.items()]
schema_embeddings = model.encode(schema_texts)

# Index with FAISS
index = faiss.IndexFlatL2(schema_embeddings[0].shape[0])
index.add(np.array(schema_embeddings))

nl_query = "Which students have enrolled in more than 2 courses?"
query_embedding = model.encode([nl_query])

D, I = index.search(query_embedding, k=3)  # get top 3 closest schema elements
retrieved = [schema_texts[i] for i in I[0]]
print("Relevant Schema Context:\n", "\n".join(retrieved))

from google import genai
from google.genai import types
from google.colab import userdata
import os

# âœ… Load Gemini API key securely from Colab Secrets
my_secret = userdata.get('gemini_api')
os.environ["GEMINI_API_KEY"] = my_secret

# âœ… Initialize Gemini client
client = genai.Client()

# ðŸ”§ Construct the prompt
prompt = f"""
You are an expert SQL generator. Given the database schema below and a user question, return only the SQL query.

Schema:
{chr(10).join(retrieved)}

Question:
{nl_query}

SQL:
"""

# âœ… Call Gemini (2.5 Flash) with optional thinking disabled
response = client.models.generate_content(
    model="gemini-2.5-flash",
    contents=prompt,
    config=types.GenerateContentConfig(
        thinking_config=types.ThinkingConfig(thinking_budget=0)  # Optional: disables "thinking" for faster response
    )
)

# âœ… Extract and print SQL
sql_query = response.text.strip()
print("Generated SQL:\n", sql_query)

